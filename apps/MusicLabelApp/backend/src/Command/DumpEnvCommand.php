<?php

namespace Masfernandez\MusicLabelApp\Infrastructure\Backend\Command;

use Symfony\Component\Console\Command\Command;
use Symfony\Component\Console\Input\InputArgument;
use Symfony\Component\Console\Input\InputInterface;
use Symfony\Component\Console\Output\OutputInterface;
use Symfony\Component\Dotenv\Dotenv;

class DumpEnvCommand extends Command
{
    /** @var string */
    protected static $defaultName = 'app:dump-env';

    public function __construct(private string $rootPath)
    {
        parent::__construct(null);
    }

    protected function configure(): void
    {
        $this
            ->setName(self::$defaultName)
            ->setDescription('Compiles .env files to .env.local.php.')
            ->addArgument('env', InputArgument::REQUIRED, 'The application environment to dump .env files for - e.g. "prod".')
            ->addArgument('path', InputArgument::OPTIONAL, 'The path to .env file from root dir.', '/');
    }

    protected function execute(InputInterface $input, OutputInterface $output): int
    {
        $_SERVER['APP_ENV'] = $env = $input->getArgument('env');
        $path = $this->rootPath . $input->getArgument('path') . '/.env';

        $vars = $this->loadEnv($path, $env);
        $vars = var_export($vars, true);
        $vars = <<<EOF
<?php

// This file was generated by running "composer dump-env $env"

return $vars;

EOF;
        file_put_contents($path . '.local.php', $vars, LOCK_EX);

        $output->writeln('Successfully dumped .env files in <info>.env.local.php</>');

        return 0;
    }

    /**
     * @return array<string, mixed>
     */
    private function loadEnv(string $path, string $env): array
    {
        if (!class_exists(Dotenv::class)) {
            throw new \RuntimeException('Please run "composer require symfony/dotenv" to load the ".env" files configuring the application.');
        }

        $globalsBackup = [$_SERVER, $_ENV];
        unset($_SERVER['APP_ENV']);
        $_ENV = ['APP_ENV' => $env];
        $_SERVER['SYMFONY_DOTENV_VARS'] = implode(',', array_keys($_SERVER));
        //$_ENV['SYMFONY_DOTENV_VARS'] = $_SERVER['SYMFONY_DOTENV_VARS'];
        putenv('SYMFONY_DOTENV_VARS=' . $_SERVER['SYMFONY_DOTENV_VARS']);

        try {
            if (method_exists(Dotenv::class, 'usePutenv')) {
                $dotenv = new Dotenv();
            } else {
                $dotenv = new Dotenv(false);
            }

            $dotenv->loadEnv($path);

            //unset($_ENV['SYMFONY_DOTENV_VARS']);
            $env = $_ENV;
        } finally {
            list($_SERVER, $_ENV) = $globalsBackup;
        }

        return $env;
    }
}
